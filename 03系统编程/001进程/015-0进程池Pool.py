"""
当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，
但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。

初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；
但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行，
"""

from multiprocessing import Pool
import os      
import random  

def worker(num):
    for i in range(5):
        print("---pid=%d--num=%d--"%(os.getpid(),num))

# 3表示进程池中最多有3个进程一起执行；
pool = Pool(3)

for i in range(10):
    print("---%d---"%i)
    # 向进程池中添加任务；
    # 注意：如果添加的任务数量超过了 进程池中进程的个数的话，那么不会导致添加不进去；
    #       添加到进程池中的任务，如果还没有被执行的话，那么此时 他们会等待进程池中的进程完成一个任务之后，
    #       会自动的去用刚刚的那个进程，完成当前的新任务；
    pool.apply_async(worker,(i,))

pool.close()  # 关闭进程池，相当于 不能够再次添加新任务了。
pool.join()   # 主进程 创建/添加 任务后，主进程默认不会等待进程池中的任务执行完后才结束；
              # 而是，当主进程的任务做完之后，立马结束，，，如果这个地方没有join()，会导致进程池中的任务不会执行；











