# 二进制最简单，只有两种状态；

'''
电路：
    1：通，闭合
    2：断开

穿孔纸带： 打孔或不打孔；表示0和1


常用进制：
    二进制：逢二进一；(0-1)
    八进制：逢八进一；(0-7)
    十进制：逢十进一；(0-9)
    十六进制：逢十六进一(0-9A-F)
'''

# 1Byte = 1024bit
# 如果用两个字节表示一个整数，最左边一个二进制位表示数字的符号；

# 原码、反码、补码
# 正数：原码 = 反码 = 补码
# 负数：反码 = 符号位不变，其他位取反
#      补码= 反码 + 1

# -1 + 1 的时候按补码去加：



# 从补码转回原码：
# 负数：补码的符号位不变，数据位取反，然后+1

# 进制转换：
# In [17]: bin(18)
# Out[17]: '0b10010'

# In [18]: oct(18)
# Out[18]: '0o22'

# In [19]: hex(18)
# Out[19]: '0x12'

# In [20]: int('0b10010',2)
# Out[20]: 18

# In [21]: int('0o22',8)
# Out[21]: 18

# In [22]: int('0x12',16)
# Out[22]: 18


################################################################################

# 位运算：

# 10 << 2   左移2位， 10 * 2 * 2  即左移2位 == 10 * (2**2)
# 10 >> 2   右移2为， 10 / 2 / 2  == 10 / (2**2)

'''
<< 左移
>> 右移
&  按位与，同1为1,否则为0；
|  按位或，逢1为1,同0才为0；
^  按位异或，不同为1,否则为0；
～ 按位取反，0变1,1变0；
'''

# 位运算是通过反码来进行的，运算完成后再转换为原码；


